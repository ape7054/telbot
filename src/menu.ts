import { Menu,MenuRange } from "@grammyjs/menu";
import { Redis } from 'ioredis';
import BotFun from './fun';
import Decimal from "decimal.js";
import { config } from "./init";

const redis = new Redis({host:config.rshost,port:6379,password:config.rspwd,db: config.rsdb});

const tokensMenu = new Menu("tokens-menu")
.dynamic(async(ctx:any) => {
  const botFun = new BotFun();
  var res = botFun.getAddressFromMsg(ctx,1);
  var address = await redis.get(res.fromId+":address") || '';
  var tokens = await botFun.getMytokens(address);
  if(tokens.length==0){
    return ctx.api.sendMessage(res.fromId,'Ê≤°Êúâ‰ª£Â∏Å');
  }
  const range = new MenuRange();
  for (let i = 0; i < tokens.length; i++) {
    const ele = tokens[i];
    if(Number(ele.amount)>0){
      var pump = await redis.get("pump:"+ele.mint) || '';
      var raydium = await redis.get("raydium:"+ele.mint) || '';
      var moralis = await redis.get("moralis:"+ele.mint) || '';
      var decimals = 9;
      var name = ele.mint;
      if(raydium == '' && pump == '' && moralis == ''){
        var result = await botFun.tokeninfoByMoralis(ele.mint);
        decimals = result.decimals;
        name = result.name+'';
      }else if(moralis){
        decimals = JSON.parse(moralis).decimals;
        name = JSON.parse(moralis).name;
      }
      if(decimals>0){
        range
        .text(name?name:ele.mint.slice(-10),async(ctx) => {
          botFun.detail_token(ctx,address,res.fromId,ele.mint);
        })
        .text(''+new Decimal(ele.amount).div(10**decimals),async(ctx) => {
          botFun.detail_token(ctx,address,res.fromId,ele.mint);
        })
        .text('Ê∏Ö‰ªì',async(ctx) => {
          var {msg,error} = await botFun.menuSell(ele.mint,res.fromId,1);
          if(error) return ctx.reply("ÂçñÂ∏ÅÈîôËØØÔºö"+error);
          return ctx.reply(msg,{ parse_mode: "HTML" });
        })
        .row()
      }
    } 
  }
  return range;
})
const snipeDetailMenu = new Menu("snipe-detail-menu")
.text("Âà∑Êñ∞")
.text("‰øÆÊîπÈáëÈ¢ù",async(ctx) => {
  var {fromId,token} = (new BotFun()).getAddressFromMsg(ctx,1);
  await redis.set(fromId+":nowToken",token);
  await redis.set(fromId+":status","snipeNumber");
  var msg = "ËØ∑ËæìÂÖ•ÁãôÂáªÈáëÈ¢ùÔºåËæìÂÖ•0.1‰ª£Ë°®ÁãôÂáª0.1SOLÔºö";
  ctx.reply(msg);
})
.row()
.text("‚ùåÂèñÊ∂àÁãôÂáª",async(ctx) => {
  const botFun = new BotFun();
  var res = botFun.getAddressFromMsg(ctx,1);
  var address = await redis.get(res.fromId+":address") || '';
  var myKey = res.fromId+":snipe";
  await redis.lrem(myKey, 0, res.token);
  await redis.del("snipe:"+address+":"+res.token);
  ctx.deleteMessage();
  ctx.reply("Âà†Èô§ÊàêÂäü");
});

const snipeMenu = new Menu("snipe-menu")
.dynamic( async(ctx:any) => {
  const botFun = new BotFun();
  var res = botFun.getAddressFromMsg(ctx,1);
  var myKey = res.fromId+":snipe";
  var snipes = await redis.lrange(myKey, 0, -1);
  var address = await redis.get(res.fromId+":address") || '';
  const range = new MenuRange();
  for (let i = 0; i < snipes.length; i++) {
    const ele = snipes[i];
    range.text(ele.slice(0,5)+"x",async(ctx) => {
      botFun.snipeDetail(ctx,ele,res.fromId,address);
    }).row()
  }
  return range;
});

// Â∫ÑÂÆ∂ËèúÂçï
const flowMenu = new Menu("flow-menu")
.dynamic( async(ctx) => {
  const botFun = new BotFun();
  var res = botFun.getAddressFromMsg(ctx,1);
  var address = await redis.get(res.fromId+":menuBank") || '';
  var info = {sellbili:1,status:0,fastsell:0,autoSell:0,gas:0.005,gasSell:0.005,maxwin:10,maxlose:10,buyRay:0,buyPump:0,rayVmax:1000,rayVmin:0,pumpVmax:80,pumpVmin:0,buyOnce:0,holdBuy:1,jitoFee:0.0025,fetchOpen:true,jitoOpen:true,pumpfee:50,rayfee:50,
    winlosetype:1,geterror:0};
  const range = new MenuRange();
  if(address=="") {
    console.log('Âú∞ÂùÄ‰ø°ÊÅØÈîôËØØ');
    return range;
  }
  var myaddress = await redis.get(res.fromId+":address");
  var addKey = 'bank:'+myaddress+":"+address;
  var addinfo = await redis.get(addKey) || '';
  console.log(address,addinfo);
  if(addinfo == '') {
    console.log('Âú∞ÂùÄ‰ø°ÊÅØÈîôËØØ');
    return range;
  }
  var jsoninfo = JSON.parse(addinfo);
  if(jsoninfo) info = jsoninfo;
  
  range.text("Èí±ÂåÖÂêçÁß∞",async(ctx)=>{
    var res = botFun.getAddressFromMsg(ctx,1);
    await redis.set(res.fromId+":status","setName");
    ctx.reply("ËØ∑ËæìÂÖ•Èí±ÂåÖÂêçÁß∞Ôºå10‰∏™‰ª•ÂÜÖÁöÑÂ≠óÁ¨¶ÔºåÊîØÊåÅÊ±âÂ≠óÔºåÂ≠óÊØçÔºåÊï∞Â≠óÁªÑÂêà");
  }).row()
  .text(() => info.status==1?"üü¢Â∑≤ÂºÄÂêØ":"üî¥Â∑≤ÊöÇÂÅú", async(ctx) => {
    info.status = info.status==1?0:1;
    await redis.set(addKey,JSON.stringify(info));
    ctx.menu.update();
  })
  .text(() => info.geterror==1?"üü¢ÂºÇÂ∏∏ÈÄöÁü•:ÂºÄÂêØ":"üî¥ÂºÇÂ∏∏ÈÄöÁü•:ÂÖ≥Èó≠", async(ctx) => {
    info.geterror = info.geterror==1?0:1;
    await redis.set(addKey,JSON.stringify(info));
    ctx.menu.update();
  })
  .row()
  range.text(() => info.fetchOpen==true && info.jitoOpen==false?'üü¢‰ªÖÈ´òÈÄüÊ®°Âºè':'‚ùå‰ªÖÈ´òÈÄüÊ®°Âºè', async(ctx) => {
    info.fetchOpen = true;
    info.jitoOpen = false;
    await redis.set(addKey,JSON.stringify(info));
    ctx.menu.update();
  })
  .text(() => info.fetchOpen==false && info.jitoOpen==true?'üü¢‰ªÖÈò≤Â§πÊ®°Âºè':'‚ùå‰ªÖÈò≤Â§πÊ®°Âºè', async(ctx) => {
    info.fetchOpen = false;
    info.jitoOpen = true;
    await redis.set(addKey,JSON.stringify(info));
    ctx.menu.update();
  })
  .text(() => info.fetchOpen==true && info.jitoOpen==true?'üü¢‰∏§ËÄÖÂπ∂Âèë':'‚ùå‰∏§ËÄÖÂπ∂Âèë', async(ctx) => {
    info.fetchOpen = true;
    info.jitoOpen = true;
    await redis.set(addKey,JSON.stringify(info));
    ctx.menu.update();
  }).row()
  .row()
  if(info.jitoOpen==true){
    range.text(() => "Ë¥øËµÇÂ∞èË¥π:"+info.jitoFee, async(ctx) => {
      ctx.deleteMessage();
      var res = botFun.getAddressFromMsg(ctx,1);
      await redis.set(res.fromId+":status","setFollowJitoFee");
      await redis.set(res.fromId+":editadd",address);
      ctx.reply("ËØ∑ËæìÂÖ•Ë¥øËµÇÂ∞èË¥π,‰æãÂ¶ÇËæìÂÖ•0.0025");
    })
    .row()
  }
  
  range.text(() => info.autoSell==1?"‚úÖË∑üÂçï‰π∞Âçñ":"‚ùåÂè™Âçï‰π∞Âçï", async(ctx) => {
    //ËøôÈáåÁöÑautoSell==1‰ª£Ë°®‰π∞ÂçñÈÉΩË∑ü,ÊòØËá™Âä®ÂçñÂ∏Å,Êó†ÈúÄÊâãÂä®
    info.autoSell = info.autoSell==1?0:1;
    await redis.set(addKey,JSON.stringify(info));
    ctx.menu.update();
  })
  .text(() => info.buyOnce==1?"üü¢Ë∑ü‰π∞‰∏ÄÊ¨°(Áõ∏Âêå‰ª£Â∏Å)":"üî¥Ë∑ü‰π∞Â§öÊ¨°(Áõ∏Âêå‰ª£Â∏Å)", async(ctx) => {
    info.buyOnce = info.buyOnce==1?0:1;
    await redis.set(addKey,JSON.stringify(info));
    ctx.menu.update();
  }).row()
  .text(() => info.buyRay>0?"‚úÖRaydiumË∑üÂçïÈáëÈ¢ù":"‚ùåRaydiumË∑üÂçïÈáëÈ¢ù", async(ctx) => {
    var res = botFun.getAddressFromMsg(ctx,1);
    await redis.set(res.fromId+":status","setRaySol");
    await redis.set(res.fromId+":editadd",address);
    ctx.reply("ËØ∑ËæìÂÖ•Âõ∫ÂÆöË∑üÂçï‰π∞ÂÖ•ÈáëÈ¢ùÔºåÂÖ≥Èó≠Ë∑üÂçïËØ∑ËæìÂÖ•0ÔºåÂ¶Ç 0.1ÔºåÊØèÊ¨°ÁõÆÊ†áÂú∞ÂùÄ‰π∞ÂÖ•ÂêéÔºå‰∏çËÆ∫ÈáëÈ¢ùÂ§ßÂ∞èÔºåÈÉΩË∑üÂçï‰π∞ÂÖ•0.1 SOL");
  })
  .text(() => info.buyPump>0?"‚úÖpumpË∑üÂçïÈáëÈ¢ù":"‚ùåpumpË∑üÂçïÈáëÈ¢ù", async(ctx) => {
    var res = botFun.getAddressFromMsg(ctx,1);
    await redis.set(res.fromId+":status","setPumpSol");
    await redis.set(res.fromId+":editadd",address);
    ctx.reply("ËØ∑ËæìÂÖ•Âõ∫ÂÆöË∑üÂçï‰π∞ÂÖ•ÈáëÈ¢ùÔºåÂÖ≥Èó≠Ë∑üÂçïËØ∑ËæìÂÖ•0ÔºåÂ¶Ç 0.1ÔºåÊØèÊ¨°ÁõÆÊ†áÂú∞ÂùÄ‰π∞ÂÖ•ÂêéÔºå‰∏çËÆ∫ÈáëÈ¢ùÂ§ßÂ∞èÔºåÈÉΩË∑üÂçï‰π∞ÂÖ•0.1 SOL");
  })
  .row()
  .text(() => "RaydiumÊ±†Â≠êËåÉÂõ¥", async(ctx) => {
    var res = botFun.getAddressFromMsg(ctx,1);
    await redis.set(res.fromId+":status","setRayPoolRange");
    await redis.set(res.fromId+":editadd",address);
    ctx.reply("ËØ∑ËæìÂÖ•RaydiumÊ±†Â≠êËåÉÂõ¥,‰æãÂ¶ÇËæìÂÖ•0-80,ÂàôÊ±†Â≠êÂ§ßÂ∞è0Ëá≥80SOLÁöÑ‰ª£Â∏ÅÊâç‰ºöË∑üÂçï");
  })
  .text(() => "pumpÊ±†Â≠êËåÉÂõ¥", async(ctx) => {
    var res = botFun.getAddressFromMsg(ctx,1);
    await redis.set(res.fromId+":status","setPumpPoolRange");
    await redis.set(res.fromId+":editadd",address);
    ctx.reply("ËØ∑ËæìÂÖ•PumpÊúÄÂ§ßÊ±†Â≠ê,‰æãÂ¶ÇËæìÂÖ•0-80,ÂàôÊ±†Â≠êÂ§ßÂ∞è0Ëá≥80SOLÁöÑ‰ª£Â∏ÅÊâç‰ºöË∑üÂçï");
  })
  .row()
  .text(() =>"Ë∑ü‰π∞gas"+info.gas+"SOL", async(ctx) => {
    var res = botFun.getAddressFromMsg(ctx,1);
    await redis.set(res.fromId+":status","setGas");
    await redis.set(res.fromId+":editadd",address);
    ctx.reply("ËØ∑ËæìÂÖ•Ë∑üÂçïgasÔºåÂ¶Ç0.01Ôºå‰ª£Ë°®Ë∑ü‰π∞‰∫§ÊòìÁöÑgas‰ºòÂÖàË¥π‰∏∫0.01 SOLÔºåËÆæÁΩÆËøá‰ΩéÂèØËÉΩÂØºËá¥Ë∑ü‰π∞Â§±Ë¥•");
  })
  .text(() =>"Ë∑üÂçñgas"+info.gasSell+"SOL", async(ctx) => {
    var res = botFun.getAddressFromMsg(ctx,1);
    await redis.set(res.fromId+":status","setGasSell");
    await redis.set(res.fromId+":editadd",address);
    ctx.reply("ËØ∑ËæìÂÖ•Ë∑üÂçïgasÔºåÂ¶Ç0.01Ôºå‰ª£Ë°®Ë∑üÂçñ‰∫§ÊòìÁöÑgas‰ºòÂÖàË¥π‰∏∫0.01 SOLÔºåËÆæÁΩÆËøá‰ΩéÂèØËÉΩÂØºËá¥Ë∑üÂçñÂ§±Ë¥•");
  })
  .row()
  .text(() => "RaydiumÊªëÁÇπ" + info.rayfee + "%", async (ctx) => {
    var res = botFun.getAddressFromMsg(ctx, 1);
    await redis.set(res.fromId + ":status", "setRayfee");
    await redis.set(res.fromId + ":editadd", address);
    ctx.reply("ËØ∑ËæìÂÖ•RaydiumÊªëÁÇπÔºàËåÉÂõ¥1-100ÔºâÔºåÊ≠£Â∏∏ÊòØ1%ÔºåËæìÂÖ•100‰ª£Â∏ÅÂÖÅËÆ∏‰ª•2ÂÄçÈáëÈ¢ùË¥≠‰π∞");
  })
  .text(() => "PumpÊªëÁÇπ" + info.pumpfee + "%", async (ctx) => {
    var res = botFun.getAddressFromMsg(ctx, 1);
    await redis.set(res.fromId + ":status", "setPumpfee");
    await redis.set(res.fromId + ":editadd", address);
    ctx.reply("ËØ∑ËæìÂÖ•PumpÊªëÁÇπÔºàËåÉÂõ¥1-100ÔºâÔºåÊ≠£Â∏∏ÊòØ1%ÔºåËæìÂÖ•100‰ª£Â∏ÅÂÖÅËÆ∏‰ª•2ÂÄçÈáëÈ¢ùË¥≠‰π∞");
  })
  .row()
  .text(() =>info.fastsell==0?"Êú™ÂºÄÂêØÂø´Ë∑ë":"‰π∞ÂÖ•Âêé"+info.fastsell+"ÊØ´ÁßíÂø´Ë∑ë", async(ctx) => {
    var res = botFun.getAddressFromMsg(ctx,1);
    await redis.set(res.fromId+":status","setFastSell");
    await redis.set(res.fromId+":editadd",address);
    ctx.reply("ËØ∑ËæìÂÖ•ÂçñÂá∫ÊúÄÂø´Èó¥Èöî Â¶Ç1000Ôºå‰ª£Ë°®Ë∑ü‰π∞Âêé1ÁßíÂêéÂº∫Âà∂ÂçñÂá∫Ôºå0‰ª£Á¨î‰∏çÂºÄÂêØÂø´Ë∑ëÊ®°Âºè");
  }).text(() =>"Ë∑üÂçñÊØî‰æã"+info.sellbili+"%", async(ctx) => {
    var res = botFun.getAddressFromMsg(ctx,1);
    await redis.set(res.fromId+":status","setSellBili");
    await redis.set(res.fromId+":editadd",address);
    ctx.reply("ËØ∑ËæìÂÖ•Ë∑üÂçñÊØî‰æã; Â¶Ç100Ôºå‰ª£Ë°®Ë∑üÂçñÊó∂ÂÖ®ÈÉ®ÂçñÂá∫ÊâÄÊåÅ‰ªì");
  }).row()
  .text(() =>info.winlosetype==1?"Ê≠¢ÁõàÊ≠¢ÊçüÊ®°Âºè:‚úÖÂçïÊ¨°‚ùåÂàÜÊÆµ":"Ê≠¢ÁõàÊ≠¢ÊçüÊ®°Âºè:‚ùåÂçïÊ¨°‚úÖÂàÜÊÆµ", async(ctx) => {
    info.winlosetype = info.winlosetype==1?2:1;
    await redis.set(addKey,JSON.stringify(info));
    ctx.menu.update();
  }).row()
  if(info.winlosetype==1){
    range.text(() =>"Ê≠¢Áõà"+info.maxwin+"%", async(ctx) => {
      var res = botFun.getAddressFromMsg(ctx,1);
      await redis.set(res.fromId+":status","setMaxWin");
      await redis.set(res.fromId+":editadd",address);
      ctx.reply("ËØ∑ËæìÂÖ•Ê≠¢ÁõàÊØî‰æã; Â¶Ç10Ôºå‰ª£Ë°®Â¶ÇÊûúË∑üÂçïÁõàÂà©ËææÂà∞10%Â∞±Á´ãÂàªÊäõÂá∫ÂÖ®ÈÉ®‰ª£Â∏Å");
    })
    .text(() =>"Ê≠¢Êçü"+info.maxlose+"%", async(ctx) => {
      var res = botFun.getAddressFromMsg(ctx,1);
      await redis.set(res.fromId+":status","setMaxLose");
      await redis.set(res.fromId+":editadd",address);
      ctx.reply("ËØ∑ËæìÂÖ•Ê≠¢ÊçüÊØî‰æã; Â¶Ç10Ôºå‰ª£Ë°®Â¶ÇÊûúË∑üÂçï‰∫èÊçüËææÂà∞10%Â∞±Á´ãÂàªÊäõÂá∫ÂÖ®ÈÉ®‰ª£Â∏Å");
    }).row()
  }else{
    range.text(() =>"Ê≠¢ÁõàÂø´ÈÄüÂçñÂá∫")
    .text(() =>"Êñ∞Â¢û", async(ctx) => {
      var res = botFun.getAddressFromMsg(ctx,1);
      await redis.set(res.fromId+":status","addKillWin");
      await redis.set(res.fromId+":editadd",address);
      ctx.reply("ËØ∑ËæìÂÖ•‰∏äÊ∂®ÊØî‰æãÂíåÂçñÂá∫ÊØî‰æãÔºåÂèØËæìÂÖ•Êï∞Â≠óÊàñÁôæÂàÜÊØîÔºå‰ª•ÈÄóÂè∑ÈöîÂºÄÔºå‰æãÂ¶ÇÔºö100,50ÊàñËÄÖ100%,50%ÔºåÈÉΩË°®Á§∫‰∏äÊ∂®100%Êó∂ÂçñÂá∫50%");
    }).row()
    var killwinKey = 'bank:'+myaddress+":killwin:"+address;
    var killwins = await redis.lrange(killwinKey,0,-1);
    killwins.forEach(win=>{
      var [num,bili] = win.split(",");
      range.text(() =>"‰ª∑Ê†º‰∏äÊ∂®"+num+"%ÂçñÂá∫"+bili+"%")
      .text(() =>"Âà†Èô§", async(ctx) => {
        await redis.lrem(killwinKey,0,win);
        ctx.menu.update();
      }).row()
    })

    range.text(() =>"Ê≠¢ÊçüÂø´ÈÄüÂçñÂá∫")
    .text(() =>"Êñ∞Â¢û", async(ctx) => {
      var res = botFun.getAddressFromMsg(ctx,1);
      await redis.set(res.fromId+":status","addKillLose");
      await redis.set(res.fromId+":editadd",address);
      ctx.reply("ËØ∑ËæìÂÖ•‰∏ãË∑åÊØî‰æãÂíåÂçñÂá∫ÊØî‰æãÔºåÂèØËæìÂÖ•Êï∞Â≠óÊàñÁôæÂàÜÊØîÔºå‰ª•ÈÄóÂè∑ÈöîÂºÄÔºå‰æãÂ¶ÇÔºö50,30ÊàñËÄÖ50%,30%ÔºåÈÉΩË°®Á§∫‰∏ãË∑å50%Êó∂ÂçñÂá∫30%");
    }).row()
    var killloseKey = 'bank:'+myaddress+":killlose:"+address;
    var killloses = await redis.lrange(killloseKey,0,-1);
    killloses.forEach(lose=>{
      var [num,bili] = lose.split(",");
      range.text(() =>"‰ª∑Ê†º‰∏ãË∑å"+num+"%ÂçñÂá∫"+bili+"%")
      .text(() =>"Âà†Èô§", async(ctx) => {
        console.log(lose);
        await redis.lrem(killloseKey,0,lose);
        ctx.menu.update();
        
      }).row()
    })
  }
  return range;
})
.back("Âà†Èô§Ë∑üÂçï", async(ctx) => {
  const botFun = new BotFun();
  var {fromId,token} = botFun.getAddressFromMsg(ctx,1);
  botFun.delBank(fromId,token,ctx);
})
.text("ËøîÂõû", async(ctx) => {
  var fromId = ctx.update.callback_query.from.id;
  ctx.deleteMessage();
  const botFun = new BotFun();
  botFun.follow_fun(ctx,Number(fromId));
})

// Ê≥®ÂÜåÂÖ•Âè£ËèúÂçï
const noUserMenu = new Menu("no-user-menu")
.text("ÁªëÂÆöÈí±ÂåÖ", async(ctx) => {
  var fromId = ctx.update.callback_query.from.id;
  await redis.del(fromId+":address");
  await redis.set(fromId+":status","waitSiyao");
  ctx.reply("ËØ∑ËæìÂÖ•‰Ω†ÁöÑÈí±ÂåÖÁßÅÈí•:\n ‚ö†Ô∏è ËØ∑ÂãøÂØπÂ§ñÊ≥ÑÈú≤ÁßÅÈí•")
});

// ÂÖ•Âè£ËèúÂçï
const menu = new Menu("main-menu")
.text("üöà‰π∞Âçñ", (ctx) => {
  ctx.reply("‚úîÔ∏èÂèëÈÄÅÂêàÁ∫¶Âú∞ÂùÄÂç≥ÂèØÂºÄÂßã‰∫§Êòì")
})
.text("üé†Ë∑üÂçï", async(ctx) => {
  const botFun = new BotFun();
  var fromId = ctx.update.callback_query.from.id;
  botFun.follow_fun(ctx,fromId);
})
.row()
.text("üî´ÊåáÂÆöÁãôÂáª", async(ctx) => {
  const botFun = new BotFun();
  var fromId = ctx.update.callback_query.from.id;
  botFun.snipeMain(ctx,fromId);
})
.text("üéØËá™Áî±ÁãôÂáª", async(ctx) => {
  const botFun = new BotFun();
  var fromId = ctx.update.callback_query.from.id;
  botFun.snipeAuto(ctx,fromId);
})
.row()
.text("üí≤ËµÑ‰∫ß", async(ctx) => {
  const botFun = new BotFun();
  var fromId = ctx.update.callback_query.from.id;
  botFun.menutokens(ctx,Number(fromId))
})
.text("‚öôÔ∏èËÆæÁΩÆ", (ctx) => {
  const botFun = new BotFun();
  var fromId = ctx.update.callback_query.from.id;
  botFun.mySetting(ctx,Number(fromId))
})
.row()
.url('solscan',async(ctx) =>{
  var fromId = ctx.update.message?.from.id;
  var address = await redis.get(fromId+":address");
  return 'https://solscan.io/account/'+address;
})
.row()
.url('Êï∞ÊçÆÂàÜÊûê',async(ctx) =>{
  var fromId = ctx.update.message?.from.id;
  var address = await redis.get(fromId+":address");
  return 'https://gmgn.ai/sol/address/'+address;
})
.row()
.text("ÈáçÊñ∞ÁªëÂÆö", async(ctx) => {
  var fromId = ctx.update.callback_query.from.id;
  await redis.del(fromId+":address");
  await redis.set(fromId+":status","waitSiyao");
  ctx.reply("ËØ∑ËæìÂÖ•‰Ω†ÁöÑÈí±ÂåÖÁßÅÈí•:\n ‚ö†Ô∏è ËØ∑ÂãøÂØπÂ§ñÊ≥ÑÈú≤ÁßÅÈí•")
});

const tokenMenu = new Menu("token-menu")
.dynamic(async(ctx) => {
  const range = new MenuRange();
  const botFun = new BotFun();
  var {fromId,token} = botFun.getAddressFromMsg(ctx,3);
  if(token == '') return range;
  var tokenSymbol = await redis.get(fromId+":nowTokenSymbol") || '';  
  range.text("Âà∑Êñ∞ "+tokenSymbol, async(ctx) => {
    const botFun = new BotFun();
    var address = await redis.get(fromId+":address");
    botFun.detail_token(ctx,address,fromId,token);
    ctx.deleteMessage();
  }).row();
  return range;
})
.text("‰π∞0.001SOL", async(ctx) => {
  const botFun = new BotFun();
  var {token, fromId} = botFun.getAddressFromMsg(ctx,3);
  var {msg,error} = await botFun.menuBuy(token,fromId,0.001);
  if(error) return ctx.reply("‰π∞Â∏ÅÈîôËØØÔºö"+error);
  return ctx.reply(msg,{ parse_mode: "HTML" });
})
.text("‰π∞0.005SOL", async(ctx) => {
  const botFun = new BotFun();
  var {token, fromId} = botFun.getAddressFromMsg(ctx,3);
  var {msg,error} = await botFun.menuBuy(token,fromId,0.005);
  if(error) return ctx.reply("‰π∞Â∏ÅÈîôËØØÔºö"+error);
  return ctx.reply(msg,{ parse_mode: "HTML" });
})
.text("‰π∞0.01SOL", async(ctx) => {
  const botFun = new BotFun();
  var {token, fromId} = botFun.getAddressFromMsg(ctx,3);
  var {msg,error} = await botFun.menuBuy(token,fromId,0.01);
  if(error) return ctx.reply("‰π∞Â∏ÅÈîôËØØÔºö"+error);
  return ctx.reply(msg,{ parse_mode: "HTML" });
})
.row()
.text("‰π∞0.03SOL", async(ctx) => {
  const botFun = new BotFun();
  var {token, fromId} = botFun.getAddressFromMsg(ctx,3);
  var {msg,error} = await botFun.menuBuy(token,fromId,0.03);
  if(error) return ctx.reply("‰π∞Â∏ÅÈîôËØØÔºö"+error);
  return ctx.reply(msg,{ parse_mode: "HTML" });
})
.text("‰π∞0.05SOL", async(ctx) => {
  const botFun = new BotFun();
  var {token, fromId} = botFun.getAddressFromMsg(ctx,3);
  var {msg,error} = await botFun.menuBuy(token,fromId,0.05);
  if(error) return ctx.reply("‰π∞Â∏ÅÈîôËØØÔºö"+error);
  return ctx.reply(msg,{ parse_mode: "HTML" });
})
.text("‰π∞xSOL", async(ctx) => {
  const botFun = new BotFun();
  var {fromId,token} = botFun.getAddressFromMsg(ctx,3);
  await redis.set(fromId+":nowToken",token);
  await redis.set(fromId+":status","buyXToken");
  ctx.reply("ËØ∑ËæìÂÖ•Ë¥≠‰π∞ÈáëÈ¢ùÔºåËæìÂÖ•0.1‰ª£Ë°®‰π∞ÂÖ•0.1SOLÔºåËæìÂÖ•ÂêéÂ∞ÜÁ´ãÂç≥Ëß¶Âèë‰π∞ÂÖ•")
})
.row()
.text("Âçñ")
.row()
.text("Âçñ50%", async(ctx) => {
  const botFun = new BotFun();
  var {fromId,token} = botFun.getAddressFromMsg(ctx,3);
  var {msg,error} = await botFun.menuSell(token,fromId,0.5);
  if(error) return ctx.reply("ÂçñÂ∏ÅÈîôËØØÔºö"+error);
  return ctx.reply(msg,{ parse_mode: "HTML" });
})
.text("Âçñ100%", async(ctx) => {
  const botFun = new BotFun();
  var {fromId,token} = botFun.getAddressFromMsg(ctx,3);
  var {msg,error} = await botFun.menuSell(token,fromId,1);
  if(error) return ctx.reply("ÂçñÂ∏ÅÈîôËØØÔºö"+error);
  return ctx.reply(msg,{ parse_mode: "HTML" });
})
.text("Âçñx%", async(ctx) => {
  const botFun = new BotFun();
  var {fromId,token} = botFun.getAddressFromMsg(ctx,3);
  await redis.set(fromId+":nowToken",token);
  await redis.set(fromId+":status","sellXToken");
  ctx.reply("ËØ∑ËæìÂÖ•Ë¥≠‰π∞ÈáëÈ¢ùÔºåËæìÂÖ•0.1‰ª£Ë°®‰π∞ÂÖ•0.1SOLÔºåËæìÂÖ•ÂêéÂ∞ÜÁ´ãÂç≥Ëß¶ÂèëÂçñÂá∫")
})
.row()
.text("Ê∏ÖÁ©∫‰∫§Êòì", async(ctx) => {
  const botFun = new BotFun();
  var {fromId,token} = botFun.getAddressFromMsg(ctx,3);
  var address = await redis.get(fromId+":address");
  await redis.del(fromId+":trade:"+token);  
  botFun.detail_token(ctx,address,fromId,token);
  ctx.deleteMessage();
})
.row()
.dynamic(async(ctx) => {
  const range = new MenuRange();
  const botFun = new BotFun();
  var {fromId,token} = botFun.getAddressFromMsg(ctx,3);
  if(token=='') return range; 
  var nowTokenType = await redis.get(fromId+":nowTokenType") || 0;  
  if(nowTokenType==0){
    range.text("üî´ÁãôÂáª",async(ctx)=>{
      var msg = "üéØÁãôÂáªÂäüËÉΩÔºö\n"+
      "Ê∑ªÂä†ÁãôÂáª‰ªªÂä°ÂêéÔºåÂ∞ÜÂú® ÂØπÂ∫î‰ª£Â∏Å-sol ÁöÑraydiumÊ±†Â≠êÂàõÂª∫Êó∂Ëß¶ÂèëÁãôÂáª‰∫§Êòì\n"+
      "üìåÁãôÂáªÊªëÁÇπÁî±Á≥ªÁªüÈªòËÆ§ËÆæÁΩÆÔºåÊöÇ‰∏çÊîØÊåÅ‰øÆÊîπ\n"+
      "üìåÁãôÂáª‰ºòÂÖàË¥πÂèØ‰ª•Âú® /set Èù¢Êùø‰øÆÊîπÔºå‰ºòÂÖàË¥πË∂äÈ´òÔºåÁãôÂáªÊàêÂäüÁéáË∂äÈ´ò";
      ctx.reply(msg);
    })
    .row()
    .text("Áãô0.01SOL",async(ctx)=>{
      (new BotFun()).addSnipe(ctx,token,Number(fromId),0.01);
    })
    .text("Áãô0.05SOL",async(ctx)=>{
      (new BotFun()).addSnipe(ctx,token,Number(fromId),0.05);
    })
    .text("Áãô x SOL",async(ctx)=>{
      await redis.set(fromId+":nowToken",token);
      await redis.set(fromId+":status","snipeNumber");
      var msg = "ËØ∑ËæìÂÖ•ÁãôÂáªÈáëÈ¢ùÔºåËæìÂÖ•0.1‰ª£Ë°®ÁãôÂáª0.1SOLÔºö";
      ctx.reply(msg);
    })
  }
  return range;
});

const settingMenu = new Menu("setting-menu")
.dynamic(async(ctx) => {
  const range = new MenuRange();
  var fromId = ctx.update.callback_query?.from.id || ctx.update.message?.from.id; 
  var address = await redis.get(fromId+":address") || '';
  var obj = await redis.get("setting:"+address) || '';
  var setting = JSON.parse(obj);
  range.text(() => "‰∫§ÊòìÊªëÁÇπ:"+setting.swapSlippage, async(ctx) => {
    ctx.deleteMessage();
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","setSwapSlippage");
    ctx.reply("ËØ∑ËæìÂÖ•‰∫§ÊòìÊªëÁÇπüìåÊªëÁÇπËåÉÂõ¥ÊîØÊåÅ1~100ÔºåÂÆûÊó∂‰∫§ÊòìÁÉ≠Èó®‰ª£Â∏ÅÊó∂ÔºåÂèØ‰ª•ËÆæÁΩÆËæÉÈ´òÊªëÁÇπÊèêÈ´ò‰∫§ÊòìÊàêÂäüÁéá");
  })
  .text(() => "‰∫§Êòì‰ºòÂÖàË¥π:"+setting.swapGas, async(ctx) => {
    ctx.deleteMessage();
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","setSwapGas");
    ctx.reply("ËØ∑ËæìÂÖ•‰∫§Êòì‰ºòÂÖàË¥πÔºàÂÜ≥ÂÆö‰∫§ÊòìÈÄüÂ∫¶ÔºâÔºåËåÉÂõ¥0-1SOL\nüìåÂΩìÂâç‰ºòÂÖàË¥π"+setting.swapGas+"SOL");
  }).row()
  range.text(() => setting.holdBuy==1?'üü¢Â∑≤ÊåÅÊúâ‰ª£Â∏Å:ÁªßÁª≠‰π∞ÂÖ•':'‚ùåÂ∑≤ÊåÅÊúâ‰ª£Â∏Å:‰∏ç‰π∞ÂÖ•', async(ctx) => {
    setting.holdBuy = setting.holdBuy==1?0:1;
    await redis.set("setting:"+address,JSON.stringify(setting));
    ctx.menu.update();
  }).row()
  range.text(() => setting.fetchOpen==true && setting.jitoOpen==false?'üü¢‰ªÖÈ´òÈÄüÊ®°Âºè':'‚ùå‰ªÖÈ´òÈÄüÊ®°Âºè', async(ctx) => {
    setting.fetchOpen = true;
    setting.jitoOpen = false;
    await redis.set("setting:"+address,JSON.stringify(setting));
    ctx.menu.update();
  })
  .text(() => setting.fetchOpen==false && setting.jitoOpen==true?'üü¢‰ªÖÈò≤Â§πÊ®°Âºè':'‚ùå‰ªÖÈò≤Â§πÊ®°Âºè', async(ctx) => {
    setting.fetchOpen = false;
    setting.jitoOpen = true;
    await redis.set("setting:"+address,JSON.stringify(setting));
    ctx.menu.update();
  })
  .text(() => setting.fetchOpen==true && setting.jitoOpen==true?'üü¢‰∏§ËÄÖÂπ∂Âèë':'‚ùå‰∏§ËÄÖÂπ∂Âèë', async(ctx) => {
    setting.fetchOpen = true;
    setting.jitoOpen = true;
    await redis.set("setting:"+address,JSON.stringify(setting));
    ctx.menu.update();
  }).row()
  if(setting.jitoOpen==true){
    range.text(() => "Ë¥øËµÇÂ∞èË¥π:"+setting.jitoFee, async(ctx) => {
      ctx.deleteMessage();
      var fromId = ctx.update.callback_query.from.id;
      await redis.set(fromId+":status","setJitoFee");
      ctx.reply("ËØ∑ËæìÂÖ•Ë¥øËµÇÂ∞èË¥π,‰æãÂ¶ÇËæìÂÖ•0.0025");
    })
  }
  return range;
}).row()

const snipeAutoMenu = new Menu("snipe-auto-menu")
.dynamic( async(ctx) => {
  const botFun = new BotFun();
  var fromId = ctx.update.message?.from.id || ctx.update.callback_query?.from.id;
  var address = await redis.get(fromId+":address");
  var obj = await redis.get(fromId+":snipeConfig") || '';
  var setting = JSON.parse(obj);
  var addressGroup = await redis.lrange('autopump:address', 0, -1);
  var timeGroup = await redis.lrange('autopump:time', 0, -1);
  var openway = 0,opentime = 0;
  if(addressGroup.includes(address)) openway = 1;
  if(timeGroup.includes(address)) opentime = 1;
  const range = new MenuRange();
  range.text("Âà∑Êñ∞", async(ctx) => {
    ctx.deleteMessage();
    botFun.snipeAuto(ctx,fromId);
  }).row()
  range.text(() =>"Gas:"+setting.gas+"SOl", async(ctx) => {
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","snipeAutoGas");
    ctx.reply("ËØ∑ËæìÂÖ•Ëá™Áî±ÁãôÂáªGasË¥πüìåËåÉÂõ¥ÊîØÊåÅ0.001~0.1");
  })
  range.text("ÂçïÊ¨°ÁãôÂáªÈáëÈ¢ù", async(ctx) => {
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","snipeAutoMaxSol");
    ctx.reply("ËØ∑ËæìÂÖ•ÂçïÊ¨°ÁãôÂáªÈáëÈ¢ùüìåËåÉÂõ¥ÊîØÊåÅ0.001~10");
  }).row()
  .text(() => openway==1?"üü¢‰ΩçÁΩÆÊ®°Âºè:Á≠âÂæÖÂ∞±Áª™":setting.status==1?"üî´‰ΩçÁΩÆÊ®°Âºè:Ê≠£Âú®ÁãôÂáª‰∏≠":"üî¥‰ΩçÁΩÆÊ®°Âºè:ÊöÇÊú™ÂºÄÂêØ", async(ctx) => {
    if(openway==1){
      await redis.lrem('autopump:address',0,address);
    }else{
      if(opentime==1){
        return ctx.reply("‰∏çËÉΩÂêåÊó∂ÂºÄÂêØ2‰∏™Ê®°Âºè");
      }else{
        await redis.rpush('autopump:address',address);
      }
    }
    ctx.deleteMessage();
    botFun.snipeAuto(ctx,fromId);
  }).row()
  .text("ÊúÄÈ´ò‰π∞ÂÖ•‰ΩçÁΩÆ", async(ctx) => {
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","snipeAutoMaxBuyPosition");
    ctx.reply("ËØ∑ËæìÂÖ•ÊúÄÈ´ò‰π∞ÂÖ•‰ΩçÁΩÆÔºåÂ¶ÇÊûúÂÆûÈôÖ‰π∞ÂÖ•ÁöÑ‰ΩçÁΩÆÈ´ò‰∫éÁ≠â‰∫éÊúÄÈ´ò‰ΩçÂàôÁ´ãÂàªÂçñÂá∫");
  })
  .text("‰∫§ÊòìÁ¨îÊï∞ÊúÄÂ§ßÂÄº", async(ctx) => {
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","snipeAutoMaxSwapPosition");
    ctx.reply("ËØ∑ËæìÂÖ•‰∫§ÊòìÁ¨îÊï∞ÊúÄÂ§ßÂÄºÔºåÂ¶ÇÊûú‰∫§ÊòìÁ¨îÊï∞ËææÂà∞ÊúÄÂ§ßÂÄºÂàôÁ´ãÂàªÂçñÂá∫");
  }).row()
  .text("ÊúÄÂ∞ëÂ§πÂá†Á¨î‰π∞Âçï", async(ctx) => {
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","snipeAutoFastSell");
    ctx.reply("ËØ∑ËæìÂÖ•ÁãôÂáªÂêéÊúÄÂø´ÂçñÂá∫Èó¥ÈöîÔºå‰æãÂ¶Ç0‰ª£Ë°®‰∏ãÂçïÂêéÁ´ãÂàªÂçñÂá∫Ôºå1‰ª£Ë°®Èó¥Èöî1Á¨î‰π∞ÂÖ•‰∫§ÊòìÊâçÂçñÂá∫");
  }).text("-").row()
  .text(() => opentime==1?"üü¢Êó∂Èó¥Ê®°Âºè:Á≠âÂæÖÂ∞±Áª™":setting.status==1?"üî´Êó∂Èó¥Ê®°Âºè:Ê≠£Âú®ÁãôÂáª‰∏≠":"üî¥Êó∂Èó¥Ê®°Âºè:ÊöÇÊú™ÂºÄÂêØ", async(ctx) => {
    if(opentime==1){
      await redis.lrem('autopump:time',0,address);
    }else{
      if(openway==1){
        return ctx.reply("‰∏çËÉΩÂêåÊó∂ÂºÄÂêØ2‰∏™Ê®°Âºè");
      }else{
        await redis.rpush('autopump:time',address);
      }
    }
    ctx.deleteMessage();
    botFun.snipeAuto(ctx,fromId);
  }).row()
  .text("Ê∂®ÂπÖÂà§Êñ≠Êó∂Èó¥", async(ctx) => {
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","snipeAutoLongTime");
    ctx.reply("ËØ∑ËæìÂÖ•Ê∂®ÂπÖÁõÆÂâçËææÊàêÊó∂Èó¥");
  })
  .text("Ê∂®ÂπÖÊØî‰æãÁõÆÊ†á", async(ctx) => {
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","snipeAutoLongBili");
    ctx.reply("ËØ∑ËæìÂÖ•ÁõÆÊ†áÊó∂Èó¥ÂÜÖÊ∂®ÂπÖÊØî‰æã");
  }).row()
  .text("ËææÊàêÁõÆÊ†áÂçñÂá∫ÊØî‰æã", async(ctx) => {
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","snipeAutoLongSell");
    ctx.reply("ËØ∑ËæìÂÖ•ËææÊàêÁõÆÊ†áÂêéÂçñÂá∫ÁöÑÊØî‰æã");
  })
  .text("Âº∫Âà∂Ê∏Ö‰ªìÊó∂Èó¥", async(ctx) => {
    var fromId = ctx.update.callback_query.from.id;
    await redis.set(fromId+":status","snipeAutoLongForce");
    ctx.reply("ËØ∑ËæìÂÖ•‰π∞ÂÖ•ÂêéÊåÅÁª≠Â§öÈïøÊó∂Èó¥Â∞±Âº∫Âà∂Ê∏Ö‰ªì");
  });
  return range;
})

// Ë∑üÂçïËèúÂçï
const followMenu = new Menu("follow-menu")
.text("Ê∑ªÂä†Ë∑üÂçï", async(ctx) => {
  var fromId = ctx.update.callback_query.from.id;
  await redis.set(fromId+":status","waitFollow");
  ctx.reply("‚úîÔ∏èËØ∑ËæìÂÖ•ÊÇ®Ë¶ÅË∑üÂçïÁöÑÂú∞ÂùÄ")
})
.row()
.dynamic( async(ctx) => {
  const botFun = new BotFun();
  var fromId = ctx.update.message?.from.id || ctx.update.callback_query?.from.id;
  var myaddress = await redis.get(fromId+":address");
  var myKey = fromId+":banker";
  var nowBanker = await redis.lrange(myKey, 0, -1);
  const range = new MenuRange();
  var allstatus:number = 0;
  for (let index = 0; index < nowBanker.length; index++) {
    const b = nowBanker[index];
    var short = b.slice(0,5);
    var addinfo = await redis.get('bank:'+myaddress+":"+b);
    var bank = JSON.parse(addinfo);
    
    if(bank.status==1 && allstatus==0){
      allstatus=1;
    }
    range
      .text(bank.name || short, (ctx) => {
        botFun.detail_fun(fromId,b,ctx);
      })
      .text("ÁºñËæë", (ctx) => {
        botFun.detail_fun(fromId,b,ctx);
      })
      .text("Âà†Èô§", async(ctx) => {
        botFun.delBank(fromId,b,ctx);
      })
      .row();
  }
  range.text(()=>allstatus==0?"üü¢‰∏ÄÈîÆÂºÄÂêØ":"üî¥‰∏ÄÈîÆÂÖ≥Èó≠", async(ctx) => {
    if(allstatus==0){
      nowBanker.forEach( async(b:string,i: Number)=>{
        var addinfo = await redis.get('bank:'+myaddress+":"+b);
        var bank = JSON.parse(addinfo);
        bank.status=1;
        await redis.set('bank:'+myaddress+":"+b,JSON.stringify(bank));
      })
    }else{
      nowBanker.forEach( async(b:string,i: Number)=>{
        var addinfo = await redis.get('bank:'+myaddress+":"+b);
        var bank = JSON.parse(addinfo);
        bank.status=0;
        await redis.set('bank:'+myaddress+":"+b,JSON.stringify(bank));
      })
    }
    ctx.deleteMessage();
    botFun.follow_fun(ctx,Number(fromId))
  }).row();
  return range;
});

const analyseTokenMenu = new Menu("analyse-token-menu")
.dynamic(async(ctx) => {
  var address = ctx.update.message?.text;
  const range = new MenuRange();
  const members = await redis.zrevrange("address:analyse:"+address, 0, -1, 'WITHSCORES'); // 0 Ë°®Á§∫ÂºÄÂßãÁ¥¢ÂºïÔºå-1 Ë°®Á§∫ÁªìÊùüÁ¥¢ÂºïÔºåÂç≥Ëé∑ÂèñÊâÄÊúâÊàêÂëò
  const formattedMembers = members.reduce(
    (acc, curr, index, arr) => {
      if (index % 2 === 0) {
        // ÂÅ∂Êï∞Á¥¢ÂºïÊòØÊàêÂëò
        acc.push({ member: curr, score: new Decimal(arr[index + 1]).div(10**9).toFixed(4) });
      }
      return acc;
    },
    [] as { member: string; score: any }[]
  );
  formattedMembers.forEach((item:any,index)=>{
    range.text(item.member, async(ctx) => {

    }).text(item.score+'').row();
  })
  return range;
});


export {
  snipeMenu,
  menu, 
  followMenu, 
  flowMenu, 
  tokenMenu, 
  noUserMenu,
  snipeDetailMenu,
  tokensMenu,
  settingMenu,
  snipeAutoMenu,
  analyseTokenMenu
}